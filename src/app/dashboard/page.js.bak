"use client";

import { useSession } from "next-auth/react";
import { useSearchParams } from "next/navigation";
import { useEffect, useState } from "react";
import DashboardLayout from "@/components/DashboardLayout";

export default function DashboardPage() {
  const { data: session } = useSession();
  const searchParams = useSearchParams();

  const [loading, setLoading] = useState(true);
  const [showSuccess, setShowSuccess] = useState(false);
  const [role, setRole] = useState(session?.user?.role || "customer");
  const [membershipStatus, setMembershipStatus] = useState("none");
  const [firstTime, setFirstTime] = useState(false);
  const [onboardingComplete, setOnboardingComplete] = useState(null);
  const [overview, setOverview] = useState(null);
  const [showWelcome, setShowWelcome] = useState(false);

  useEffect(() => {
    const run = async () => {
      if (!session?.user?.email) return;
      try {
        const res = await fetch(`/api/users/status?email=${session.user.email}`);
        const data = await res.json();
        if (data?.role) setRole(data.role);
        if (data?.membership?.status) setMembershipStatus(data.membership.status);
        if (typeof data?.onboardingComplete !== "undefined") {
          setOnboardingComplete(Boolean(data.onboardingComplete));
        }
        try {
          const key = `dh_welcome_shown:${session.user.email}`;
          const already = localStorage.getItem(key) === "1";
          const isConvertedCustomer = data?.role === "customer" && (!data?.membership || data?.membership?.status === "none");
          if (!already && isConvertedCustomer) {
            setShowWelcome(true);
            localStorage.setItem(key, "1");
          }
        } catch {}
      } catch (e) {
        console.error(e);
      } finally {
        setLoading(false);
      }
    };
    run();
  }, [session?.user?.email]);

  useEffect(() => {
    const run = async () => {
      if (!session?.user?.email) return;
      try {
        const res = await fetch("/api/account/overview");
        if (!res.ok) return;
        setOverview(await res.json());
      } catch {}
    };
    run();
  }, [session?.user?.email]);

  useEffect(() => {
    const ft = searchParams.get("firstTime");
    if (ft === "1") setFirstTime(true);
    const from = searchParams.get("from");
    if (from === "success") {
      setShowSuccess(true);
      const t = setTimeout(() => setShowSuccess(false), 5000);
      return () => clearTimeout(t);
    }
  }, [searchParams]);

  const handleUpgrade = async () => {
    try {
      setLoading(true);
      const res = await fetch("/api/checkout", { method: "POST" });
      const data = await res.json();
      if (data.url) window.location.href = data.url;
      else alert("Failed to start checkout. Please try again.");
    } catch {
      alert("Something went wrong. Please try again.");
    } finally {
      setLoading(false);
    }
  };

  const getRoleBadge = (r) => {
    switch (r) {
      case "member":
        return <span className="ml-2 px-2 py-1 text-xs font-semibold rounded bg-green-100 text-green-700 border border-green-300">Member</span>;
      case "trial":
        return <span className="ml-2 px-2 py-1 text-xs font-semibold rounded bg-yellow-100 text-yellow-700 border border-yellow-300">Trial</span>;
      default:
        return <span className="ml-2 px-2 py-1 text-xs font-semibold rounded bg-gray-100 text-gray-700 border border-gray-300">Customer</span>;
    }
  };

  if (loading) {
    return (
      <DashboardLayout>
        <div className="flex justify-center items-center h-[60vh]">
          <p className="text-gray-500 animate-pulse">Loading your dashboard...</p>
        </div>
      </DashboardLayout>
    );
  }

  const showOnboarding = firstTime || onboardingComplete === false;

  return (
    <DashboardLayout>
      <div className="max-w-3xl mx-auto text-center mt-12">
        {showSuccess && (
          <div className="bg-green-100 text-green-800 p-3 rounded-lg mb-4">Payment successful - your membership has been activated!</div>
        )}

        {showWelcome && (
          <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/40">
            <div className="bg-white rounded-2xl shadow-xl max-w-lg w-full mx-4 p-6 text-center">
              <h2 className="font-bold text-xl mb-3">You made it, {session?.user?.name || "there"}! 🎉🐝</h2>
              <p className="text-gray-700 mb-4">
                Your trial class was just the beginning — we’d love for you to stay buzzing with us!<br />
                Get ready to bee-come an official member of the Hive! ✨
              </p>
              <div className="flex gap-3 justify-center">
                <button onClick={handleUpgrade} className="bg-blue-600 hover:bg-blue-700 text-white font-semibold px-5 py-2 rounded">Upgrade to Member</button>
                <button onClick={() => setShowWelcome(false)} className="border border-gray-300 text-gray-700 px-5 py-2 rounded hover:bg-gray-50">Not now</button>
              </div>
            </div>
          </div>
        )}

        <h1 className="text-2xl font-bold mb-3 flex justify-center items-center">
          Welcome back, {session?.user?.name || "User"} {getRoleBadge(role)}
        </h1>
        <p className="text-gray-600 mb-6">Your current role: <span className="font-medium">{role}</span></p>

        {showOnboarding && (
          <div className="bg-blue-50 border border-blue-200 text-blue-800 p-4 rounded-md mb-6 max-w-2xl mx-auto">
            <p className="font-semibold mb-2">Welcome to your new membership!</p>
            <p className="mb-3">For security and better service, please:</p>
            <ul className="list-disc list-inside text-left mb-3">
              <li>Set a new password</li>
              <li>Update personal, emergency and medical details</li>
            </ul>
            <div className="flex gap-3 justify-center">
              <a className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md" href="/dashboard/settings">Update Details</a>
            </div>
          </div>
        )}

        \ \ \ \ \ \ \ \ \{!showWelcome\ &&\ overview\?\.child\ &&\ \(\n\ \ \ \ \ \ \ \ \ \ <div\ className="max-w-3xl\ mx-auto\ bg-white\ rounded-xl\ shadow\ p-6\ text-left\ mb-6">\n\ \ \ \ \ \ \ \ \ \ \ \ <div\ className="flex\ items-center\ justify-between\ mb-3">\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ <h2\ className="text-lg\ font-semibold">Child\ Details</h2>\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ <a\ href="/dashboard/settings"\ className="text-sm\ text-blue-600\ hover:underline">Edit</a>\n\ \ \ \ \ \ \ \ \ \ \ \ </div>\n\ \ \ \ \ \ \ \ \ \ \ \ <div\ className="grid\ md:grid-cols-3\ gap-4\ text-sm">\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ <div>\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ <div\ className="text-gray-500">Child\ name</div>\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ <div\ className="font-medium">\{\[overview\.child\.firstName,\ overview\.child\.lastName]\.filter\(Boolean\)\.join\("\ "\)}</div>\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ </div>\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \{overview\.child\?\.age\ !=\ null\ &&\ \(\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ <div>\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ <div\ className="text-gray-500">Age</div>\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ <div\ className="font-medium">\{overview\.child\.age}</div>\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ </div>\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \)}\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \{overview\.child\?\.dob\ &&\ \(\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ <div>\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ <div\ className="text-gray-500">Date\ of\ birth</div>\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ <div\ className="font-medium">\{new\ Date\(overview\.child\.dob\)\.toLocaleDateString\(\)}</div>\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ </div>\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \)}\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ <div\ className="md:col-span-3">\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ <div\ className="text-gray-500">Medical\ information</div>\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ <div\ className="font-medium\ whitespace-pre-wrap">\{overview\.medical\ \|\|\ "No\ medical\ information\ on\ file\.\ Please\ update\ in\ Settings\."}</div>\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ </div>\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ <div\ className="md:col-span-3">\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ <div\ className="text-gray-500">Emergency\ contact\ details</div>\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ <div\ className="font-medium">\{\[\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ overview\.emergencyContact\?\.name,\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ overview\.emergencyContact\?\.phone,\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ overview\.emergencyContact\?\.relation,\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ ]\.filter\(Boolean\)\.join\('\ ·\ '\)\ \|\|\ 'Not\ provided'}</div>\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ </div>\n\ \ \ \ \ \ \ \ \ \ \ \ </div>\n\ \ \ \ \ \ \ \ \ \ </div>\n\ \ \ \ \ \ \ \ \)}</div>
              </div>
              {overview.child?.age != null && (
                <div>
                  <div className="text-gray-500">Age</div>
                  <div className="font-medium">{overview.child.age}</div>
                </div>
              )}
              <div className="md:col-span-2">
                <div className="text-gray-500">Medical Information</div>
                <div className="font-medium whitespace-pre-wrap">{overview.medical || "No medical information on file. Please update in Settings."}</div>
              </div>
            </div>
          </div>
        )}

        {!showWelcome && !(role === "member" || membershipStatus === "active") ? (
          <button onClick={handleUpgrade} disabled={loading} className="bg-blue-600 hover:bg-blue-700 text-white font-semibold px-5 py-2 rounded transition disabled:opacity-50">
            {loading ? "Loading..." : "Upgrade to Member"}
          </button>
        ) : null}
      </div>
    </DashboardLayout>
  );
}

"use client";

import { useSession } from "next-auth/react";
import { useSearchParams } from "next/navigation";
import { useEffect, useState } from "react";
import DashboardLayout from "@/components/DashboardLayout";

export default function DashboardPage() {
  const { data: session } = useSession();
  const searchParams = useSearchParams();

  const [loading, setLoading] = useState(true);
  const [showSuccess, setShowSuccess] = useState(false);
  const [role, setRole] = useState(session?.user?.role || "customer");
  const [membershipStatus, setMembershipStatus] = useState("none");
  const [firstTime, setFirstTime] = useState(false);
  const [onboardingComplete, setOnboardingComplete] = useState(null);
  const [overview, setOverview] = useState(null);
  const [showWelcome, setShowWelcome] = useState(false);

  useEffect(() => {
    const run = async () => {
      if (!session?.user?.email) return;
      try {
        const res = await fetch(`/api/users/status?email=${session.user.email}`);
        const data = await res.json();
        if (data?.role) setRole(data.role);
        if (data?.membership?.status) setMembershipStatus(data.membership.status);
        if (typeof data?.onboardingComplete !== "undefined") {
          setOnboardingComplete(Boolean(data.onboardingComplete));
        }
        try {
          const key = `dh_welcome_shown:${session.user.email}`;
          const already = localStorage.getItem(key) === "1";
          const isConvertedCustomer = data?.role === "customer" && (!data?.membership || data?.membership?.status === "none");
          if (!already && isConvertedCustomer) {
            setShowWelcome(true);
            localStorage.setItem(key, "1");
          }
        } catch {}
      } catch (e) {
        console.error(e);
      } finally {
        setLoading(false);
      }
    };
    run();
  }, [session?.user?.email]);

  useEffect(() => {
    const run = async () => {
      if (!session?.user?.email) return;
      try {
        const res = await fetch("/api/account/overview");
        if (!res.ok) return;
        setOverview(await res.json());
      } catch {}
    };
    run();
  }, [session?.user?.email]);

  useEffect(() => {
    const ft = searchParams.get("firstTime");
    if (ft === "1") setFirstTime(true);
    const from = searchParams.get("from");
    if (from === "success") {
      setShowSuccess(true);
      const t = setTimeout(() => setShowSuccess(false), 5000);
      return () => clearTimeout(t);
    }
  }, [searchParams]);

  const handleUpgrade = async () => {
    try {
      setLoading(true);
      const res = await fetch("/api/checkout", { method: "POST" });
      const data = await res.json();
      if (data.url) window.location.href = data.url;
      else alert("Failed to start checkout. Please try again.");
    } catch {
      alert("Something went wrong. Please try again.");
    } finally {
      setLoading(false);
    }
  };

  const getRoleBadge = (r) => {
    switch (r) {
      case "member":
        return <span className="ml-2 px-2 py-1 text-xs font-semibold rounded bg-green-100 text-green-700 border border-green-300">Member</span>;
      case "trial":
        return <span className="ml-2 px-2 py-1 text-xs font-semibold rounded bg-yellow-100 text-yellow-700 border border-yellow-300">Trial</span>;
      default:
        return <span className="ml-2 px-2 py-1 text-xs font-semibold rounded bg-gray-100 text-gray-700 border border-gray-300">Customer</span>;
    }
  };

  if (loading) {
    return (
      <DashboardLayout>
        <div className="flex justify-center items-center h-[60vh]">
          <p className="text-gray-500 animate-pulse">Loading your dashboard...</p>
        </div>
      </DashboardLayout>
    );
  }

  const showOnboarding = firstTime || onboardingComplete === false;

  return (
    <DashboardLayout>
      <div className="max-w-3xl mx-auto text-center mt-12">
        {showSuccess && (<div className="bg-green-100 text-green-800 p-3 rounded-lg mb-4">Payment successful - your membership has been activated!</div>)}

        {showWelcome && (
          <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/40">
            <div className="bg-white rounded-2xl shadow-xl max-w-lg w-full mx-4 p-6 text-center">
              <h2 className="font-bold text-xl mb-3">You made it, {session?.user?.name || "there"}! 🎉🐝</h2>
              <p className="text-gray-700 mb-4">Your trial class was just the beginning — we’d love for you to stay buzzing with us!<br />Get ready to bee-come an official member of the Hive! ✨</p>
              <div className="flex gap-3 justify-center">
                <button onClick={handleUpgrade} className="bg-blue-600 hover:bg-blue-700 text-white font-semibold px-5 py-2 rounded">Upgrade to Member</button>
                <button onClick={() => setShowWelcome(false)} className="border border-gray-300 text-gray-700 px-5 py-2 rounded hover:bg-gray-50">Not now</button>
              </div>
            </div>
          </div>
        )}

        <h1 className="text-2xl font-bold mb-3 flex justify-center items-center">Welcome back, {session?.user?.name || "User"} {getRoleBadge(role)}</h1>
        <p className="text-gray-600 mb-6">Your current role: <span className="font-medium">{role}</span></p>

        {showOnboarding && (
          <div className="bg-blue-50 border border-blue-200 text-blue-800 p-4 rounded-md mb-6 max-w-2xl mx-auto">
            <p className="font-semibold mb-2">Welcome to your new membership!</p>
            <p className="mb-3">For security and better service, please:</p>
            <ul className="list-disc list-inside text-left mb-3">
              <li>Set a new password</li>
              <li>Update personal, emergency and medical details</li>
            </ul>
            <div className="flex gap-3 justify-center"><a className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md" href="/dashboard/settings">Update Details</a></div>
          </div>
        )}

        {/* Child Details card */}
        {!showWelcome && overview?.child && (
          <div className="max-w-3xl mx-auto bg-white rounded-xl shadow p-6 text-left mb-6">
            <div className="flex items-center justify-between mb-3">
              <h2 className="text-lg font-semibold">Child Details</h2>
              <a href="/dashboard/settings" className="text-sm text-blue-600 hover:underline">Edit</a>
            </div>
            <div className="grid md:grid-cols-3 gap-4 text-sm">
              <div>
                <div className="text-gray-500">Child name</div>
                <div className="font-medium">{[overview.child.firstName, overview.child.lastName].filter(Boolean).join(" ")}</div>
              </div>
              {overview.child?.age != null && (
                <div>
                  <div className="text-gray-500">Age</div>
                  <div className="font-medium">{overview.child.age}</div>
                </div>
              )}
              {overview.child?.dob && (
                <div>
                  <div className="text-gray-500">Date of birth</div>
                  <div className="font-medium">{new Date(overview.child.dob).toLocaleDateString()}</div>
                </div>
              )}
              <div className="md:col-span-3">
                <div className="text-gray-500">Medical information</div>
                <div className="font-medium whitespace-pre-wrap">{overview.medical || "No medical information on file. Please update in Settings."}</div>
              </div>
              <div className="md:col-span-3">
                <div className="text-gray-500">Emergency contact details</div>
                <div className="font-medium">{[overview.emergencyContact?.name, overview.emergencyContact?.phone, overview.emergencyContact?.relation].filter(Boolean).join(" · ") || "Not provided"}</div>
              </div>
            </div>
          </div>
        )}

        {/* Parent Details card */}
        {!showWelcome && (
          <div className="max-w-3xl mx-auto bg-white rounded-xl shadow p-6 text-left mb-6">
            <div className="flex items-center justify-between mb-3">
              <h2 className="text-lg font-semibold">Parent Details</h2>
            </div>
            <div className="grid md:grid-cols-3 gap-4 text-sm">
              <div>
                <div className="text-gray-500">Parent name</div>
                <div className="font-medium">{[overview.parent?.firstName, overview.parent?.lastName].filter(Boolean).join(" ") || "-"}</div>
              </div>
              <div>
                <div className="text-gray-500">Phone</div>
                <div className="font-medium">{overview.phone || "-"}</div>
              </div>
              <div>
                <div className="text-gray-500">Email</div>
                <div className="font-medium">{overview.email || "-"}</div>
              </div>
              <div className="md:col-span-3">
                <div className="text-gray-500">Address details</div>
                <div className="font-medium">{[overview.address?.houseNumber, overview.address?.street, overview.address?.city, overview.address?.county, overview.address?.postcode].filter(Boolean).join(', ') || '-'}</div>
              </div>
            </div>
          </div>
        )}

        {!showWelcome && !(role === "member" || membershipStatus === "active") ? (
          <button onClick={handleUpgrade} disabled={loading} className="bg-blue-600 hover:bg-blue-700 text-white font-semibold px-5 py-2 rounded transition disabled:opacity-50">{loading ? "Loading..." : "Upgrade to Member"}</button>
        ) : null}
      </div>
    </DashboardLayout>
  );
}
"use client";

import { useSession } from "next-auth/react";
import { useEffect, useState } from "react";
import DashboardLayout from "@/components/DashboardLayout";

export default function DashboardPage() {
  const { data: session } = useSession();
  const [loading, setLoading] = useState(true);
  const [role, setRole] = useState("customer");
  const [overview, setOverview] = useState(null);

  useEffect(() => {
    (async () => {
      try {
        // fetch role
        if (session?.user?.email) {
          const s = await fetch(`/api/users/status?email=${session.user.email}`);
          const sd = await s.json();
          if (sd?.role) setRole(sd.role);
        }
        // fetch overview
        const r = await fetch("/api/account/overview");
        if (r.ok) setOverview(await r.json());
      } finally {
        setLoading(false);
      }
    })();
  }, [session?.user?.email]);

  if (loading) {
    return (
      <DashboardLayout>
        <div className="flex justify-center items-center h-[60vh]">
          <p className="text-gray-500 animate-pulse">Loading your dashboard...</p>
        </div>
      </DashboardLayout>
    );
  }

  const childName = overview ? [overview.child?.firstName, overview.child?.lastName].filter(Boolean).join(" ") : "";
  const parentName = overview ? [overview.parent?.firstName, overview.parent?.lastName].filter(Boolean).join(" ") : "";
  const addressLine = overview
    ? [
        overview.address?.houseNumber,
        overview.address?.street,
        overview.address?.city,
        overview.address?.county,
        overview.address?.postcode,
      ]
        .filter(Boolean)
        .join(", ")
    : "";

  return (
    <DashboardLayout>
      <div className="max-w-3xl mx-auto text-center mt-12">
        <h1 className="text-2xl font-bold mb-3">Welcome back, {session?.user?.name || "User"}</h1>
        <p className="text-gray-600 mb-6">Your current role: <span className="font-medium">{role}</span></p>

        {/* Child Details */}
        {overview && (
          <div className="max-w-3xl mx-auto bg-white rounded-xl shadow p-6 text-left mb-6">
            <div className="flex items-center justify-between mb-3">
              <h2 className="text-lg font-semibold">Child Details</h2>
              <a href="/dashboard/settings" className="text-sm text-blue-600 hover:underline">Edit</a>
            </div>
            <div className="grid md:grid-cols-3 gap-4 text-sm">
              <div>
                <div className="text-gray-500">Child name</div>
                <div className="font-medium">{childName || "-"}</div>
              </div>
              {overview.child?.age != null && (
                <div>
                  <div className="text-gray-500">Age</div>
                  <div className="font-medium">{overview.child.age}</div>
                </div>
              )}
              {overview.child?.dob && (
                <div>
                  <div className="text-gray-500">Date of birth</div>
                  <div className="font-medium">{new Date(overview.child.dob).toLocaleDateString()}</div>
                </div>
              )}
              <div className="md:col-span-3">
                <div className="text-gray-500">Medical information</div>
                <div className="font-medium whitespace-pre-wrap">{overview.medical || "No medical information on file. Please update in Settings."}</div>
              </div>
              <div className="md:col-span-3">
                <div className="text-gray-500">Emergency contact details</div>
                <div className="font-medium">{[overview.emergencyContact?.name, overview.emergencyContact?.phone, overview.emergencyContact?.relation].filter(Boolean).join(" · ") || "Not provided"}</div>
              </div>
            </div>
          </div>
        )}

        {/* Parent Details */}
        {overview && (
          <div className="max-w-3xl mx-auto bg-white rounded-xl shadow p-6 text-left mb-6">
            <div className="flex items-center justify-between mb-3">
              <h2 className="text-lg font-semibold">Parent Details</h2>
            </div>
            <div className="grid md:grid-cols-3 gap-4 text-sm">
              <div>
                <div className="text-gray-500">Parent name</div>
                <div className="font-medium">{parentName || "-"}</div>
              </div>
              <div>
                <div className="text-gray-500">Phone</div>
                <div className="font-medium">{overview.phone || "-"}</div>
              </div>
              <div>
                <div className="text-gray-500">Email</div>
                <div className="font-medium">{overview.email || "-"}</div>
              </div>
              <div className="md:col-span-3">
                <div className="text-gray-500">Address details</div>
                <div className="font-medium">{addressLine || "-"}</div>
              </div>
            </div>
          </div>
        )}
      </div>
    </DashboardLayout>
  );
}

